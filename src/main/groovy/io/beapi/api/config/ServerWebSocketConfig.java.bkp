package io.beapi.api.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.config.annotation.EnableWebSocket;
import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;
import demo.application.controller.ServerWebSocketHandler;

@Configuration
@EnableWebSocket
public class ServerWebSocketConfig implements WebSocketConfigurer {

	@Override
	public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {

		registry.addHandler(webSocketHandler(), "/websocket");
	}

	@Bean
	public WebSocketHandler webSocketHandler() {
		return new ServerWebSocketHandler();
	}

	@Configuration
    public class DynamicBeanDefinitionRegistrarConfiguration {
      @Bean
      public static DynamicBeanDefinitionRegistrar beanDefinitionRegistrar(Environment environment) {
        return new DynamicBeanDefinitionRegistrar(environment);
      }
    }

    /*
    @Bean
    public HandlerMapping webSocketHandlerMapping() {
        /*
        var map = Map.of("/event", eventHandler);
        var handlerMapping = new SimpleUrlHandlerMapping();
        handlerMapping.setOrder(1);
        handlerMapping.setUrlMap(map);
        return handlerMapping;
         */

        Map<String, Object> urlMap = new LinkedHashMap<>();

        LinkedHashMap<String, Object> handlers = this.listableBeanFactory.getBeansWithAnnotation(io.beapi.api.utils.WebSocket.class);
        if(handlers) {
            handlers.each() { k, v ->
                Pattern p = ~/([A-Za-z].+)Handler/
                Matcher match = p.matcher(k)
                if (match.find()) {
                    String path = "/"+match[0][1].uncapitalize()
                    urlMap.put(path, v)
                }
            }
        }

        WebSocketHandlerMapping mapping = new WebSocketHandlerMapping();
        mapping.setWebSocketUpgradeMatch(true);
        mapping.setUrlMap(urlMap);
        // Ahead of HTTP endpoint ("routerFunctionMapping" bean)
        mapping.setOrder(Integer.MAX_VALUE-7);

        return mapping;
    }
    */

}