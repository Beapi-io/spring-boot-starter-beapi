package $packageName;

import io.beapi.api.controller.BeapiRequestHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;
import ${domainPackage}.${logicalClassName};
import ${(domainPackage-'domain')+'service'}.${logicalClassName}Service;


@Controller("${realClassName}")
public class ${logicalClassName}Controller extends BeapiRequestHandler{

    @Autowired ${logicalClassName}Service ${realClassName}Service;

	public List<${logicalClassName}> list(HttpServletRequest request, HttpServletResponse response) {
		List<${logicalClassName}> $realClassName = ${realClassName}Service.findAll();
		return $realClassName;
	}

	public ${logicalClassName} show(HttpServletRequest request, HttpServletResponse response){
	    Long tmp = Long.parseLong(this.params.get("id").toString());
        ${logicalClassName} ${realClassName}= ${realClassName}Service.findById(tmp);

        if (Objects.nonNull(${realClassName})) {
            return ${realClassName};
        }
        return null;
    }

	public ${logicalClassName} create(HttpServletRequest request, HttpServletResponse response) throws Exception{
        $logicalClassName $realClassName = new ${logicalClassName}();

        if(Objects.nonNull($realClassName)){
            ${createData}

            if(!Objects.nonNull(${realClassName}Service.save($realClassName))){
                 throw new Exception("[${logicalClassName}Controller : create] : could not save :");
            }
            return $realClassName;
        }else{
            return null;
        }
	}


	public ${logicalClassName} update(HttpServletRequest request, HttpServletResponse response) throws Exception{
        Long tmp = Long.parseLong(this.params.get("id").toString());
        ${logicalClassName} $realClassName = ${realClassName}Service.findById(tmp);

        if(Objects.nonNull($realClassName)){
            ${updateData}


            if(!Objects.nonNull(${realClassName}Service.save($realClassName))){
                throw new Exception("[${logicalClassName}Controller : update] : could not save :");
            }
            return $realClassName;
        } else {
            return null;
        }
	}

    Map delete(HttpServletRequest request, HttpServletResponse response) {
        Long tmp = Long.parseLong(this.params.get("id").toString());
        ${logicalClassName} $realClassName = ${realClassName}Service.findById(tmp);
        if(Objects.nonNull($realClassName)){
                ${realClassName}Service.deleteById(Long.parseLong(this.params.get("id")));
                ${realClassName}Service.flush();
                Map data = Map.of("id",this.params.get("id"));
                Map output = Map.of("$realClassName", data);
                return output;
                //return {$realClassName: {id: this.params.id.toLong()}};
        } else {
            return null;
        }
    }
}
