package $packageName

import io.beapi.api.controller.BeapiRequestHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;
import demo.application.domain.<%=logicalClassName%>;
import demo.application.service.<%=logicalClassName%>Service;


@Controller("<%=realClassName%>")
class <%=logicalClassName%>Controller extends BeapiRequestHandler{

	SpringSecurityService springSecurityService

    @Autowired
    private <%=logicalClassName%>Service <%=realClassName%>Service;

	LinkedHashMap list() {
		def $realClassName = <%=logicalClassName%>.list()
		return [<%=realClassName%>:<%=realClassName%>]
	}

	LinkedHashMap show(){
		try{
			$logicalClassName $realClassName = <%=logicalClassName%>.get(params.id)
			if($realClassName){
				return [$realClassName: $realClassName]
			}else{
				render(status: 500,text:"Id does not match record in database.")
			}

		}catch(Exception e){
			throw new Exception("[<%=logicalClassName%>Controller : show] : Exception - full stack trace follows:",e)
		}
    }

	LinkedHashMap create(){
		try{
			$logicalClassName $realClassName = new <%=logicalClassName%>(<%=createData%>)

			if($realClassName){
				if(!<%=realClassName%>.save(flush:true,failOnError:true)){
					<%=realClassName%>.errors.allErrors.each { println(it) }
				}
				return [$realClassName: $realClassName]
			}else{
				render(status: 500,text:"Id does not match record in database.")
			}
		}catch(Exception e){
			throw new Exception("[<%=logicalClassName%>Controller : create] : Exception - full stack trace follows:",e)
		}
	}


	LinkedHashMap update(){
		try{
			$logicalClassName $realClassName = new $logicalClassName()

			if($realClassName){


			    // updateData


				if(!<%=realClassName%>.save(flush:true,failOnError:true)){
					<%=realClassName%>.errors.allErrors.each { println(it) }
				}
				return [$realClassName : $realClassName ]
			}else{
				render(status: 500,text:"Id does not match record in database.")
			}
		}catch(Exception e){
			throw new Exception("[<%=logicalClassName%>Controller : update] : Exception - full stack trace follows:",e)
		}
	}

    LinkedHashMap delete() {
        $logicalClassName $realClassName
        try {
            $realClassName = <%=logicalClassName%>.get(params.id)
            if($realClassName){
                    <%=realClassName%>.delete(flush: true, failOnError: true)
                    return [$realClassName: [id: params.id.toLong()]]
            }else{
                render(status: 500,text:"Id " + params.id + " does not match record in database.")
            }
        }catch(Exception e){
            throw new Exception("[<%=logicalClassName%>Controller : delete] : Exception - full stack trace follows:",e)
        }
    }

    protected boolean isSuperuser() {
        springSecurityService.principal.authorities*.authority.any { grailsApplication.config.apitoolkit.admin.roles.contains(it) }
    }
}
