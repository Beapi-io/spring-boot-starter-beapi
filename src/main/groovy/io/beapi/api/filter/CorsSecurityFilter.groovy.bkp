package io.beapi.api.filter;


import io.beapi.api.properties.ApiProperties
import io.beapi.api.service.ApiCacheService
import io.beapi.api.service.PrincipleService
import io.beapi.api.utils.ApiDescriptor
import org.springframework.stereotype.Component
import javax.servlet.http.HttpSession
import org.springframework.web.context.request.RequestContextHolder as RCH
import org.springframework.web.filter.OncePerRequestFilter
import javax.servlet.FilterChain
import javax.servlet.ServletException
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse
import org.springframework.http.HttpStatus
import org.springframework.context.ApplicationContext
import org.springframework.boot.context.properties.EnableConfigurationProperties
import org.springframework.beans.factory.annotation.Autowired

/**
 * Filter for handling CORS(cross origin resource sharing) for request from frontend
 *
 * @author Owen Rubel
 */

@Component
@EnableConfigurationProperties([ApiProperties.class])
class CorsSecurityFilter extends OncePerRequestFilter {


    ApiCacheService apiCacheService
    ApiProperties apiProperties
    protected ApiDescriptor apiObject
    def uList
    ArrayList networkGrps = []

    public CorsSecurityFilter(ApiProperties apiProperties, ApiCacheService apiCacheService) {
        this.apiProperties = apiProperties
        this.apiCacheService = apiCacheService
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws ServletException, IOException {
        println("### CorsSecurityFilter")

        // reservedUris will have NULL for reservedGrps/whitelist
        uList = request.getAttribute('uriList')

        if(uList) {
            def cache = apiCacheService.getApiCache(uList[4])
            def temp = cache[uList[3]]

            if (cache) {
                this.apiObject = temp[uList[5]]
                String networkGrp = this.apiObject['networkGrp']
                LinkedHashMap corsNetworkGroups = apiProperties.security.corsNetworkGroups
                corsNetworkGroups[networkGrp].each { k, v -> this.networkGrps.add(v) }
            }

        }

        if (!processPreflight(request, response)) {
            chain.doFilter(request, response)
        }

    }

    boolean processPreflight(HttpServletRequest request, HttpServletResponse response) {
        boolean options = ('OPTIONS'==request.method.toUpperCase())
        println(apiProperties.reservedUris)
        println(request.getRequestURI())
        if(!apiProperties.reservedUris.contains(request.getRequestURI())) {
            if(!networkGrps){
                String msg = "NETWORKGRP for IO State file :" + uList[4] + " cannot be found. Please double check it against available NetworkGroups in the beapi_api.yml config file."
                writeErrorResponse(response, '401', request.getRequestURI(), msg);
            }
        }

        String origin = request.getHeader('Origin')

        if (options) {
            response.addHeader('Allow', 'GET, HEAD, POST, PUT, DELETE, TRACE, PATCH')
            if (origin != 'null') {
                //response.setHeader("Access-Control-Allow-Headers", "Cache-Control,  Pragma, WWW-Authenticate, Origin, X-Requested-With, authorization, Content-Type,Access-Control-Request-Headers,Access-Control-Request-Method,Access-Control-Allow-Credentials")
                response.addHeader('Access-Control-Allow-Headers', 'Accept, Accept-Charset, Accept-Datetime, Accept-Encoding, Accept-Ext, Accept-Features, Accept-Language, Accept-Params, Accept-Ranges, Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Origin, Access-Control-Expose-Headers, Access-Control-Max-Age, Access-Control-Request-Headers, Access-Control-Request-Method, Age, Allow, Alternates, Authentication-Info, Authorization, C-Ext, C-Man, C-Opt, C-PEP, C-PEP-Info, CONNECT, Cache-Control, Compliance, Connection, Content-Base, Content-Disposition, Content-Encoding, Content-ID, Content-Language, Content-Length, Content-Location, Content-MD5, Content-Range, Content-Script-Type, Content-Security-Policy, Content-Style-Type, Content-Transfer-Encoding, Content-Type, Content-Version, Cookie, Cost, DAV, DELETE, DNT, DPR, Date, Default-Style, Delta-Base, Depth, Derived-From, Destination, Differential-ID, Digest, ETag, Expect, Expires, Ext, From, GET, GetProfile, HEAD, HTTP-date, Host, IM, If, If-Match, If-Modified-Since, If-None-Match, If-Range, If-Unmodified-Since, Keep-Alive, Label, Last-Event-ID, Last-Modified, Link, Location, Lock-Token, MIME-Version, Man, Max-Forwards, Media-Range, Message-ID, Meter, Negotiate, Non-Compliance, OPTION, OPTIONS, OWS, Opt, Optional, Ordering-Type, Origin, Overwrite, P3P, PEP, PICS-Label, POST, PUT, Pep-Info, Permanent, Position, Pragma, ProfileObject, Protocol, Protocol-Query, Protocol-Request, Proxy-Authenticate, Proxy-Authentication-Info, Proxy-Authorization, Proxy-Features, Proxy-Instruction, Public, RWS, Range, Referer, Refresh, Resolution-Hint, Resolver-Location, Retry-After, Safe, Sec-Websocket-Extensions, Sec-Websocket-Key, Sec-Websocket-Origin, Sec-Websocket-Protocol, Sec-Websocket-Version, Security-Scheme, Server, Set-Cookie, Set-Cookie2, SetProfile, SoapAction, Status, Status-URI, Strict-Transport-Security, SubOK, Subst, Surrogate-Capability, Surrogate-Control, TCN, TE, TRACE, Timeout, Title, Trailer, Transfer-Encoding, UA-Color, UA-Media, UA-Pixels, UA-Resolution, UA-Windowpixels, URI, Upgrade, User-Agent, Variant-Vary, Vary, Version, Via, Viewport-Width, WWW-Authenticate, Want-Digest, Warning, Width, xsrf-token, X-Content-Duration, X-Content-Security-Policy, X-Content-Type-Options, X-CustomHeader, X-DNSPrefetch-Control, X-Forwarded-For, X-Forwarded-Port, X-Forwarded-Proto, X-Frame-Options, X-Modified, X-OTHER, X-PING, X-PINGOTHER, X-Powered-By, X-Requested-With')
                response.addHeader('Access-Control-Allow-Methods', 'POST, PUT, DELETE, TRACE, PATCH, OPTIONS')
                response.addHeader('Access-Control-Expose-Headers', 'xsrf-token, Location , X-Auth-Token')
                response.addHeader('Access-Control-Max-Age', '3600')
            }
        }


        if (networkGrps && networkGrps.contains(origin)) {
            println("### networkGrps contains origin")
            //request.setAttribute('CORS', true)
            response.setHeader('Access-Control-Allow-Origin', origin)
            response.addHeader('Access-Control-Allow-Credentials', 'true')
        } else if (networkGrps.isEmpty()) { // no networkGrps??? white list all
            // add CORS access control headers for all origins
            if (origin) {
                println("### has origin ###")
                println(request.getHeader("Authorization"))
                response.setHeader('Access-Control-Allow-Origin', origin)
                response.addHeader('Access-Control-Allow-Credentials', 'true')
            } else {
                response.addHeader('Access-Control-Allow-Origin', '*')
            }
        }
        response.status = HttpStatus.OK.value()

        println(options)
        return options
    }
}
