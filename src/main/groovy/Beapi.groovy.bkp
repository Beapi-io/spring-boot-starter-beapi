/*
 * Copyright 2013-2023 Beapi.io
 *
 * Licensed under the MPL-2.0 License;
 * you may not use this file except in compliance with the License.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import groovy.cli.commons.CliBuilder

import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.regex.Matcher
import java.util.regex.Pattern
import java.io.File


import groovy.text.Template
import groovy.text.GStringTemplateEngine


class Beapi {

    // expect 2 args
    static void main(String[] args) {
        CommandLineInterface cli = CommandLineInterface.INSTANCE
        cli.parse(args)
    }
}


/**
 * CLI Interface for tool
 */
enum CommandLineInterface{
    INSTANCE

    CliBuilder cliBuilder

    CommandLineInterface(){
        cliBuilder = new CliBuilder(
            usage: 'Beapi [<options>] -<controller/domain/connector>=your.package.name',
            header: 'OPTIONS:',
            footer: "The Beapi CLI tool helps scaffold controllers, domains, and/or connectors for your API project. If you have any questions, please visit us a http://beapi.io. Thanks again."
        )

        cliBuilder.width=80
        cliBuilder.with {

            // HELP OPT
            h(longOpt: 'help', 'Print this help text and exit (usage: -h, --help)')

            // REQUIRED TEST OPTS
            _(longOpt:'controller',args:2,valueSeparator:'=',argName:'property=value', 'scaffold value (usage: -controller=your.package.name)')
            _(longOpt:'domain',args:2,valueSeparator:'=',argName:'property=value', 'scaffold value (usage: -domain=your.package.name)')
            _(longOpt:'connector',args:2,valueSeparator:'=',argName:'property=value', 'scaffold value (usage: -connecto=your.package.namer)')
        }
    }

    void parse(args) {
        OptionAccessor options = cliBuilder.parse(args)
        try {


            if (!args) {
                throw new Exception('Could not parse command line options.\n')
            }
            if (options.h) {
                cliBuilder.usage()
                System.exit 0
            }

            if (options.d) {
                if (options.controller) {
                    try {
                        createController()
                    } catch (Exception e) {
                        throw new Exception('Scaffold Value must not be NULL. Please provide ARG value of \'-controller/domain/connector\'.', e)
                    }
                }

                if (options.domain) {
                    try {
                        createDomain()
                    } catch (Exception e) {
                        throw new Exception('Scaffold Value must not be NULL. Please provide ARG value of \'-controller/domain/connector\'.', e)
                    }
                }

                if (options.connector) {
                    try {
                        createConnector()
                    } catch (Exception e) {
                        throw new Exception('Scaffold Value must not be NULL. Please provide ARG value of \'-controller/domain/connector\'.', e)
                    }
                }
            } else {
                throw new Exception('Method (-d/--domainname) is REQUIRED for Beapi to work. Please try again.\n')
            }
        } catch (Exception e) {
            System.err << e
            System.exit 1
        }
    }

    private void createController(){

    }

    private void createDomain(){

    }

    private void createConnector(){

    }

    private void checkDirectory(contDir) {
        def ant = new AntBuilder()
        def cfile = new File(contDir)
        if (!cfile.exists()) {
            ant.mkdir(dir: contDir)
        }
        return
    }

    private boolean fileExists(String path){
        def cfile = new File(path)
        if (cfile.exists()) {
            return true
        }
        return false
    }

    private LinkedHashMap hibernateTypeConverter(String type){
        switch(type){
            case 'class org.hibernate.type.CharacterType':
                return ['Character':'java.lang.Character']
                break
            case 'class org.hibernate.type.NumericBooleanType':
            case 'class org.hibernate.type.YesNoType':
            case 'class org.hibernate.type.TrueFalseType':
            case 'class org.hibernate.type.BooleanType':
                return ['Boolean':'java.lang.Boolean']
                break
            case 'class org.hibernate.type.ByteType':
                return ['Byte':'java.lang.Byte']
                break
            case 'class org.hibernate.type.ShortType':
                return ['Short':'java.lang.Short']
                break
            case 'class org.hibernate.type.IntegerTypes':
                return ['Integer':'java.lang.Integer']
                break
            case 'class org.hibernate.type.LongType':
                return ['Long':'java.lang.Long']
                break
            case 'class org.hibernate.type.FloatType':
                return ['Float':'java.lang.Float']
                break
            case 'class org.hibernate.type.DoubleType':
                return ['Double':'java.lang.Double']
                break
            case 'class org.hibernate.type.BigIntegerType':
                return ['BigInteger':'java.math.BigInteger']
                break
            case 'class org.hibernate.type.BigDecimalType':
                return ['BigDecimal':'java.math.BigDecimal']
                break
            case 'class org.hibernate.type.TimestampType':
                return ['Timestamp':'java.sql.Timestamp']
                break
            case 'class org.hibernate.type.TimeType':
                return ['Time':'java.sql.Time']
                break
            case 'class org.hibernate.type.CalendarDateType':
            case 'class org.hibernate.type.DateType':
                return ['Date':'java.sql.Date']
                break
            case 'class org.hibernate.type.CalendarType':
                return ['Calendar':'java.util.Calendar']
                break
            case 'class org.hibernate.type.CurrencyType':
                return ['Currency':'java.util.Currency']
                break
            case 'class org.hibernate.type.LocaleType':
                return ['Locale':'java.util.Locale']
                break
            case 'class org.hibernate.type.TimeZoneType':
                return ['TimeZone':'java.util.TimeZone']
                break
            case 'class org.hibernate.type.UrlType':
                return ['URL':'java.net.URL']
                break
            case 'class org.hibernate.type.ClassType':
                return ['Class':'java.lang.Class']
                break
            case 'class org.hibernate.type.MaterializedBlobType':
            case 'class org.hibernate.type.BlobType':
                return ['Blob':'java.sql.Blob']
                break
            case 'class org.hibernate.type.ClobType':
                return ['Clob':'java.sql.Clob']
                break
            case 'class org.hibernate.type.PostgresUUIDType':
            case 'class org.hibernate.type.UUIDBinaryType':
                return ['UUID':'java.util.UUID']
                break
            case 'class org.hibernate.type.TextType':
            case 'class org.hibernate.type.StringType':
            default:
                return ['String':'java.lang.String']
                break
        }
    }
}













