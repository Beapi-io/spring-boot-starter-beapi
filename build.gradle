buildscript {
    repositories {
        mavenLocal() {
            metadataSources {
                mavenPom()
                artifact()
            }
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.github.gradle-nexus:publish-plugin:1.0.0")
    }
}


plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    //id "signing"
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'groovy'
}


apply plugin: "maven-publish"
apply plugin: 'signing'
apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply plugin: 'groovy'
apply plugin: 'io.spring.dependency-management'


description = "The Beapi Springboot Starter for API Automation; automates and simplifies almost all API functionality and security"


bootJar {
    enabled = false
}

group = "io.beapi"
archivesBaseName = "spring-boot-starter-beapi"
version = "${version}"

sourceCompatibility = "${sourceCompatibility}"

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}


java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {

    implementation("org.springframework.boot:spring-boot-starter:${springBootVersion}"){
        exclude group:'org.springframework.boot', module:'spring-boot-starter-logging'
    }

    // Gradle 4.6 and later
    annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor:${springBootVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot:${springBootVersion}"
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")

    //implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}"){
    //    exclude group:'org.springframework', module:'spring-web'
    //}

    //implementation 'org.projectlombok:lombok:1.18.20'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    implementation 'org.json:json:20210307'
    implementation 'com.google.code.gson:gson:2.8.9'

    // LOGGING
    //implementation 'org.slf4j:slf4j-api:1.7.15'
    runtimeOnly 'org.slf4j:slf4j-api:1.7.15'

    // SECURITY
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:2.13.3"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.13.3"
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // LOGGING FOR GRAFANA/ GRAPHITE / CARBON
    implementation "io.micrometer:micrometer-registry-graphite:1.3.0"

    // GROOVY
    implementation("org.codehaus.groovy:groovy-ant"){
        exclude group:'org.codehaus.groovy', module: 'groovy-all'
    }
    implementation('org.codehaus.groovy:groovy-json:2.5.4'){
        exclude group:'org.codehaus.groovy', module: 'groovy-all'
    }
    implementation('org.codehaus.gpars:gpars:1.2.1'){
        exclude group:'org.multiverse', module:'multiverse-core'
        exclude group:'org.codehaus.groovy', module: 'groovy-all'
    }

    // IOUTILS
    implementation 'commons-io:commons-io:2.8.0'

    implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"

    implementation('org.projectlombok:lombok:1.18.2')
    annotationProcessor 'org.projectlombok:lombok:1.18.2'

    // CACHING
    implementation 'org.springframework:spring-context-support:5.3.3'
    implementation 'org.springframework.boot:spring-boot-starter-cache:2.7.0'
    implementation 'org.hibernate:hibernate-ehcache:5.4.15.Final'
    implementation group: 'com.google.guava', name: 'guava', version: '14.0'

    // FOR NONNULL ANNOTATION
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    //compileOnly('org.projectlombok:lombok:1.18.2')

    // TEST
    //implementation('org.springframework:spring-test:5.3.20')
    //testImplementation('org.spockframework:spock-core:2.0-M3-groovy-3.0')
    //testImplementation('org.spockframework:spock-spring:2.0-M3-groovy-3.0')
    //testImplementation('org.springframework.boot:spring-boot-starter-test') {
    //    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    //}
    implementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

}


project.plugins.withType(MavenPublishPlugin).all {
    PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
    publishing.publications.withType(MavenPublication).all { mavenPublication ->
        mavenPublication.pom {
            name = "${project.group}:${project.name}"
            description = "The Beapi Springboot Starter for API Automation; automates and simplifies almost all API functionality and security"
            url = "https://github.com/orubel/spring-boot-starter-beapi"
            licenses {
                license {
                    name = "Reciprocal Public License (RPL-1.5)"
                    url = "https://opensource.org/licenses/RPL-1.5"
                }
            }
            developers {
                developer {
                    id = "orubel"
                    name = "Owen Rubel"
                    email = "orubel+spam@gmail.com"
                }
            }
            scm {
                connection = "https://github.com/orubel/spring-boot-starter-beapi.git"
                developerConnection = "https://github.com/orubel/spring-boot-starter-beapi.git"
                url = "https://github.com/orubel/spring-boot-starter-beapi"
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("ORG_GRADLE_PROJECT_ossrhUsername")
            password = System.getenv("ORG_GRADLE_PROJECT_ossrhPassword")
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }

    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}



def hasSigningKey = findProperty("signing.keyId") || findProperty("signing.key")
if(hasSigningKey) {
    sign(project)
}
void sign(Project project) {
    project.signing {
        required { project.gradle.taskGraph.hasTask("publish") }
        def signingKeyId = findProperty("signing.keyId")
        def signingKey = findProperty("signing.key")
        def signingPassword = findProperty("signing.password")

        if (signingKeyId) {
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        sign publishing.publications.maven
    }
}











